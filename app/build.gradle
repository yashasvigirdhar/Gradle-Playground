apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply from: '../gitutils.gradle'


def VERSION_PROPERTIES_FILE_NAME = 'version.properties'
def VERSION_CODE_KEY = "VERSION_CODE"

android {
    compileSdkVersion 27

    def versionPropsFile = file(VERSION_PROPERTIES_FILE_NAME)
    Properties versionProps = new Properties()
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps[VERSION_CODE_KEY].toInteger()
        defaultConfig {
            applicationId "com.yashasvi.gradleplayground"
            minSdkVersion 26
            targetSdkVersion 27
            versionCode code
            versionName "1.0"
            setProperty("archivesBaseName", "v$versionName-" + "$code-" + getBranchName())
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("version properties file not found")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task updateVersionCode(type: VersionCodeTask) {
    group 'GradlePlayground'
    description 'updates version code'
}

class VersionCodeTask extends DefaultTask {

    @TaskAction
    void updateVersionCode() {
        def versionPropsFile = project.file('version.properties')
        Properties versionProps = new Properties()
        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        } else {
            versionProps['VERSION_CODE'] = '0'
        }

        def code = versionProps['VERSION_CODE'].toInteger() + 1
        print "New version code: $code"

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }
}

task commitToGit <<  {
    group 'GradlePlayground'
    def versionPropsFile = project.file('version.properties')
    Properties versionProps = new Properties()
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        grgit.add(patterns: ['app/version.properties'])
        grgit.commit(message: "Update version code to $code")
        grgit.push()
    } else {
        throw new GradleException("can't find version.properties file")
    }
}

updateVersionCode.finalizedBy commitToGit